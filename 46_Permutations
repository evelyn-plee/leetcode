/*
Backtracking using the swapping method
*/

#include <vector>

using namespace std;

class Solution{
public:
    vector<vector<int>> permute(vector<int> &num){
        vector<vector<int>> res;
        permuteRecursive(num, 0, res);
        return res;
    }

    void permuteRecursive(vector<int> &num, int begin, vector<vector<int>> &result){
        if(begin >= num.size()){
            result.push_back(num);
            return;
        }

        for(int i = begin; i < num.size(); i++){
            swap(num[begin], num[i]);
            permuteRecursive(num, begin+1, result);
            swap(num[begin], num[i]);
        }
    }
};
