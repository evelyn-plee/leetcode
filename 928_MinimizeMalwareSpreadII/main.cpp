class Solution {
public:
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        sort(initial.begin(), initial.end());
        int res = INT_MAX, node = -1;
        for (int i = 0; i < initial.size(); i++) {
            int k = initial[i];
            int count = getMalwareNodes(k, graph, initial);
            if (count < res) {
                res = count;
                node = k;
            }
        }
        
        return node;
    }
private:
    int getMalwareNodes(int disable, vector<vector<int>>& graph, vector<int>& initial) {
        int N = graph.size();

        vector<bool> mask(N, false);
        queue<int> q;
        
        for (int i = 0; i < initial.size(); i++) {
            int k = initial[i];
            if (k == disable) {
                continue;
            }

            q.push(k);
            mask[k] = true;
        }
        
        while (!q.empty()) {
            int n = q.front();
            q.pop();

            for (int i = 0; i < N; i++) {
                if (i == n || i == disable) {
                    continue;
                }
                if (graph[n][i] == 0 || mask[i]) {
                    continue;
                }
                mask[i] = true;
                q.push(i);
            }
        }
        
        int infected = 0;
        for (int i = 0; i < N; i++) {
            if (mask[i]) {
                infected++;
            }
        }
        
        return infected; 
    }
};
