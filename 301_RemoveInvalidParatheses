#include <vector>
#include <string>

using namespace std;


class Solution{
public:
    vector<string> removeInvalidParentheses(const string& s){
        int l = 0;
        int r = 0;
        for(const char ch : s){
            l += (ch == '(');
            if(l == 0) r += (ch == ')');
            else l -= (ch == '(');
        }
        vector<string> res;
        dfs(s, 0, l, r, res);
        return res;
    }
private:
    bool isValid(const string& s){
        int count;
        for(const char ch : s){
            if(ch == '(') ++count;
            if(ch == ')') --count;
            if(count < 0) return false;
        }
        return count == 0;
    }

    void dfs(const string& s, int start, int l, int r, vector<string>& res){
         // Base case: when l == r, nothing to remove
         if(l == 0 && r == 0){
            if(isValid(s)) res.push_back(s);
            return;      
         }

         for(int i = start; i < s.length(); ++i){
             if(i != start && s[i] == s[i-1]) continue;

             if(s[i] == '(' || s[i] == ')'){
                 string cur = s;
                 cur.erase(i, 1);
                 // always try to remove right parentheses before left because a valid one always starts with left
                 if(r > 0 && s[i] == ')') dfs(cur, i, l, r-1, res);
                 else if(l > 0 && s[i] == '(') dfs(cur, i, l-1, r, res);
             }
         }
    }
};
